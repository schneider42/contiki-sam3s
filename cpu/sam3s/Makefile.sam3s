# Adapted from Makefile.STM32F103CB

# Default to sam3s2
CHIP = sam3s2

### Code common for all ARM CPUs

#CONTIKI_CPU_ARM=$(CONTIKI)/cpu/arm/
#CONTIKI_CPU_ARM_COMMON=$(CONTIKI_CPU_ARM)/common

### Define the CPU directory
CONTIKI_CPU=$(CONTIKI)/cpu/sam3s

### Define the source files we have in the STM32F103 port

CONTIKI_CPU_DIRS = . libchip_sam3s/include libchip_sam3s usb usb/include
#../common/dbg-io ../common/usb loader


include $(CONTIKI_CPU)/makelib.mk

SAM3S     = cpu-clock.c rtimer-arch.c uip_arch.c watchdog.c #debug-uart.c interrupt-utils.c newlib-syscalls.c sys-interrupt.c uip-log.c

# SYSAPPS = codeprop-otf.c
# APPDIRS += $(CONTIKI)/cpu/sam3s/loader

# ELFLOADER = elfloader-otf.c elfloader-arm.c symtab.c cfs-ram.c

#include $(CONTIKI_CPU_ARM_COMMON)/usb/Makefile.usb

#include $(CONTIKI_CPU_ARM_COMMON)/SD-card/Makefile.sdcard

#TARGETLIBS = random.c dbg-printf.c dbg-puts.c dbg-putchar.c dbg-sprintf.c dbg-snprintf.c strformat.c

CONTIKI_TARGET_SOURCEFILES += $(SAM3S) $(SYSAPPS) $(ELFLOADER) \
			$(TARGETLIBS) $(UIPDRIVERS) $(USB)

CONTIKI_SOURCEFILES        += $(CONTIKI_TARGET_SOURCEFILES)


THREADS =

### Compiler definitions
CC       = arm-none-eabi-gcc
LD       = arm-none-eabi-gcc
AS       = arm-none-eabi-as
AR       = arm-none-eabi-ar
NM       = arm-none-eabi-nm
OBJCOPY  = arm-none-eabi-objcopy
STRIP    = arm-none-eabi-strip
SIZE    = arm-none-eabi-size

XSLTPROC=xsltproc

#PROJECT_OBJECTFILES += ${addprefix $(OBJECTDIR)/,$(CONTIKI_TARGET_MAIN:.c=.o)}

LINKERSCRIPT = $(CONTIKI_CPU)/$(CHIP)/flash.ld

#STARTUP=${addprefix $(OBJECTDIR)/,startup-STM32F10x.o}

#ARCH_FLAGS= -march=armv7-m -mthumb

#CFLAGSNO = -I. -I$(CONTIKI)/core -I$(CONTIKI_CPU) -I$(CONTIKI_CPU)/loader \
#	   -I$(CONTIKI_CPU)/dbg-io \
#           -I$(CONTIKI)/platform/$(TARGET) \
#           ${addprefix -I,$(APPDIRS)} \
#           -DWITH_UIP -DWITH_ASCII -DMCK=$(MCK) \
#           -Wall $(ARCH_FLAGS) -g -D SUBTARGET=$(SUBTARGET)

#CFLAGS  += $(CFLAGSNO) -O -DRUN_AS_SYSTEM -DROM_RUN

#CFLAGSNO = ${addprefix -I,$(APPDIRS)} \
           -DWITH_UIP -DWITH_ASCII -DMCK=$(MCK) \
           -D SUBTARGET=$(SUBTARGET)

#CFLAGS  += $(CFLAGSNO) -O -DRUN_AS_SYSTEM -DROM_RUN

#include $(CONTIKI_CPU)/libchip_sam3s/build/gcc/gcc.mk
#---------------------------------------------------------------
TARGET_LIBFILES = -lgcc -lc $(CONTIKI_CPU)/libchip_sam3s/lib/libchip_sam3s2_gcc_dbg.a $(CONTIKI_CPU)/usb/lib/libusb_sam3s_gcc_dbg.a
#TARGET_LIBFILES = -lgcc -lc $(CONTIKI_CPU)/libchip_sam3s/lib/libchip_sam3s2_gcc_rel.a $(CONTIKI_CPU)/usb/lib/libusb_sam3s_gcc_rel.a

CFLAGS += -Wall -Wchar-subscripts -Wcomment -Wformat=2 -Wimplicit-int
CFLAGS += -Werror-implicit-function-declaration -Wmain -Wparentheses
CFLAGS += -Wsequence-point -Wreturn-type -Wswitch -Wtrigraphs -Wunused
CFLAGS += -Wuninitialized -Wunknown-pragmas -Wfloat-equal
#-Wundef
#-Wshadow
CFLAGS += -Wpointer-arith -Wbad-function-cast -Wwrite-strings
CFLAGS += -Wsign-compare -Waggregate-return -Wstrict-prototypes
#CFLAGS += -Wmissing-declarations
CFLAGS += -Wformat -Wmissing-format-attribute -Wno-deprecated-declarations
CFLAGS += -Wnested-externs -Winline -Wlong-long
CFLAGS += -Wunreachable-code
#CFLAGS += -Wpacked
#CFLAGS += -Wmissing-prototypes
#CFLAGS += -Wredundant-decls
#CFLAGS += -Wcast-align
#CFLAGS += -Wmissing-noreturn
#CFLAGS += -Wconversion

# To reduce application size use only integer printf function.
CFLAGS += -Dprintf=iprintf
# sad but true...
CFLAGS += -fno-strict-aliasing

# -mlong-calls  -Wall
CFLAGS += --param max-inline-insns-single=500 -mcpu=cortex-m3 -mthumb -ffunction-sections
#CFLAGS += -g $(OPTIMIZATION) -D$(CHIP) -DTRACE_LEVEL=$(TRACE_LEVEL)
CFLAGS += -g $(OPTIMIZATION) -D$(CHIP) -DTRACE_LEVEL=0

CFLAGSNO = ${addprefix -I,$(APPDIRS)} -DWITH_UIP 

CFLAGS  += $(CFLAGSNO)

LDFLAGS= -mcpu=cortex-m3 -mthumb -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--entry=ResetException -Wl,--unresolved-symbols=report-all -Wl,--warn-common -Wl,--warn-section-align
#LD_OPTIONAL=-Wl,--print-gc-sections -Wl,--stats


#---------------------------------------------------------------

LDFLAGS += -L $(CONTIKI_CPU) -T $(LINKERSCRIPT) 
#-nostartfiles

CUSTOM_RULE_LINK=yes
#%.$(TARGET): %.co $(PROJECT_OBJECTFILES) $(PROJECT_LIBRARIES) contiki-$(TARGET).a chiplib usblib
#	$(LD) $(LDFLAGS) $(TARGET_STARTFILES) ${filter-out chiplib usblib %.a,$^} ${filter %.a,$^} $(TARGET_LIBFILES) -Wl,-Map,$@.map -o $@
%.$(TARGET): %.co $(PROJECT_OBJECTFILES) $(PROJECT_LIBRARIES) contiki-$(TARGET).a chiplib usblib 
	$(LD) $(LDFLAGS)  $(TARGET_STARTFILES) ${filter-out chiplib usblib %.a,$^} -Wl,--start-group ${filter %.a,$^}  $(TARGET_LIBFILES) -Wl,--end-group -Wl,-Map,$@.map -o $@
	$(NM) $@ > $@.txt
	$(OBJCOPY) -O binary $@ $@.bin
	$(SIZE) $@



#CDEPFLAGS = $(CFLAGS) -D __MAKING_DEPS__

### Setup directory search path for source files

#CUSTOM_RULE_C_TO_OBJECTDIR_O=yes
#CUSTOM_RULE_C_TO_O=yes

#%.o: %.c
#	$(CC) $(CFLAGS) $< -c

#$(OBJECTDIR)/%.o: %.c
#	$(CC) $(CFLAGS) -c $< -o $@


#CUSTOM_RULE_S_TO_OBJECTDIR_O = yes
#%.o: %.S
#	$(CC) $(CFLAGS) $< -c

#$(OBJECTDIR)/%.o: %.S
#	$(CC) $(CFLAGS) $< -c  -o $@


#CUSTOM_RULE_C_TO_CO=yes

#%.co: %.c
#	$(CC) $(CFLAGS) $< -c -o $@

#CUSTOM_RULE_C_TO_CE=yes

#%.ce: %.o
#	$(LD) $(LDFLAGS) --relocatable -T $(CONTIKI_CPU)/merge-rodata.ld $< -o $@
#	$(STRIP) -K _init -K _fini --strip-unneeded -g -x $@

#CUSTOM_RULE_LINK=yes

#%-stripped.o: %.c
#	$(CC) $(CFLAGS) -c $< -o $@
#	$(STRIP) --strip-unneeded -g -x $@

#%-stripped.o: %.o
#	$(STRIP) --strip-unneeded -g -x -o $@ $<

#%.o: ${CONTIKI_TARGET}/loader/%.S
#	$(AS) -o $(notdir $(<:.S=.o)) $<

#%-nosyms.$(TARGET): %.co $(PROJECT_OBJECTFILES) contiki-$(TARGET).a $(STARTUP) # $(OBJECTDIR)/empty-symbols.o
#	$(CC) $(LDFLAGS) $(CFLAGS) -nostartfiles -o $@ $(filter-out %.a,$^) $(filter %.a,$^) -lc $(filter %.a,$^)


#%.ihex: %.$(TARGET)
#	$(OBJCOPY) $^ -O ihex $@

#%.bin: %.$(TARGET)
#	$(OBJCOPY) -O binary $< $@
 
#.PHONY: symbols.c
#%.$(TARGET): %-nosyms.$(TARGET)
#	ln -sf $< $@

#empty-symbols.c:
#	cp ${CONTIKI}/tools/empty-symbols.c symbols.c
#	cp ${CONTIKI}/tools/empty-symbols.h symbols.h



clean: clean_cpu

#.PHONY: stm32test_clean
#
clean_cpu:
	-rm -rf $(BUILTSRCDIR)

#.PRECIOUS: %-nosyms.$(TARGET)
